// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStore.MVC.Persistence.Data;

namespace MusicStore.MVC.Migrations
{
  [DbContext(typeof(MusicStoreContext))]
  [Migration("20190422165639_Adding_Identity_Tables")]
  partial class Adding_Identity_Tables
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
          .HasAnnotation("Relational:MaxIdentifierLength", 128)
          .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken();

            b.Property<string>("Name")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedName")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasName("RoleNameIndex")
                      .HasFilter("[NormalizedName] IS NOT NULL");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("ClaimType");

            b.Property<string>("ClaimValue");

            b.Property<string>("RoleId")
                      .IsRequired();

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("ClaimType");

            b.Property<string>("ClaimValue");

            b.Property<string>("UserId")
                      .IsRequired();

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider");

            b.Property<string>("ProviderKey");

            b.Property<string>("ProviderDisplayName");

            b.Property<string>("UserId")
                      .IsRequired();

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId");

            b.Property<string>("RoleId");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId");

            b.Property<string>("LoginProvider");

            b.Property<string>("Name");

            b.Property<string>("Value");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.AlbumEntity", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("Description");

            b.Property<string>("Name");

            b.HasKey("Id");

            b.ToTable("Albums");
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.GenreEntity", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("Name");

            b.HasKey("Id");

            b.ToTable("Genres");
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.GenreSongEntity", b =>
          {
            b.Property<int>("GenreId");

            b.Property<int>("SongId");

            b.HasKey("GenreId", "SongId");

            b.HasIndex("SongId");

            b.ToTable("GenreSongEntity");
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.SongEntity", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<int?>("AlbumId");

            b.Property<string>("Name");

            b.HasKey("Id");

            b.HasIndex("AlbumId");

            b.ToTable("Songs");
          });

      modelBuilder.Entity("MusicStore.MVC.Models.User", b =>
          {
            b.Property<string>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<int>("AccessFailedCount");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken();

            b.Property<string>("Email")
                      .HasMaxLength(256);

            b.Property<bool>("EmailConfirmed");

            b.Property<bool>("LockoutEnabled");

            b.Property<DateTimeOffset?>("LockoutEnd");

            b.Property<string>("NormalizedEmail")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedUserName")
                      .HasMaxLength(256);

            b.Property<string>("PasswordHash");

            b.Property<string>("PhoneNumber");

            b.Property<bool>("PhoneNumberConfirmed");

            b.Property<string>("SecurityStamp");

            b.Property<bool>("TwoFactorEnabled");

            b.Property<string>("UserName")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasName("UserNameIndex")
                      .HasFilter("[NormalizedUserName] IS NOT NULL");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("MusicStore.MVC.Models.User")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("MusicStore.MVC.Models.User")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("MusicStore.MVC.Models.User")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("MusicStore.MVC.Models.User")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.GenreSongEntity", b =>
          {
            b.HasOne("MusicStore.MVC.Entities.GenreEntity", "Genre")
                      .WithMany("GenreSong")
                      .HasForeignKey("GenreId")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("MusicStore.MVC.Entities.SongEntity", "Song")
                      .WithMany("GenreSong")
                      .HasForeignKey("SongId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("MusicStore.MVC.Entities.SongEntity", b =>
          {
            b.HasOne("MusicStore.MVC.Entities.AlbumEntity", "Album")
                      .WithMany("Songs")
                      .HasForeignKey("AlbumId")
                      .OnDelete(DeleteBehavior.SetNull);
          });
#pragma warning restore 612, 618
    }
  }
}
